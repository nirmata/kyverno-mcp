apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multi-Tenancy
    policies.kyverno.io/description: Kubernetes Namespaces are an optional feature
      that provide a way to segment and isolate cluster resources across multiple
      applications and users. As a best practice, workloads should be isolated with
      Namespaces. Namespaces should be required and the default (empty) Namespace
      should not be used. This policy validates that Pods specify a Namespace name
      other than `default`. Rule auto-generation is disabled here due to Pod controllers
      need to specify the `namespace` field under the top-level `metadata` object
      and not at the Pod template level.
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow Default Namespace
  name: disallow-default-namespace
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: validate-namespace
    validate:
      message: Using 'default' namespace is not allowed.
      pattern:
        metadata:
          namespace: '!default'
  - match:
      any:
      - resources:
          kinds:
          - DaemonSet
          - Deployment
          - Job
          - StatefulSet
    name: validate-podcontroller-namespace
    validate:
      message: Using 'default' namespace is not allowed for pod controllers.
      pattern:
        metadata:
          namespace: '!default'
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: An ingress resource needs to define an actual
      host name in order to be valid. This policy ensures that there is a hostname
      for each rule defined.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Ingress
    policies.kyverno.io/title: Disallow empty Ingress host
  name: disallow-empty-ingress-host
spec:
  background: false
  rules:
  - match:
      resources:
        kinds:
        - Ingress
    name: disallow-empty-ingress-host
    validate:
      deny:
        conditions:
        - key: '{{ request.object.spec.rules[].host || `[]` | length(@) }}'
          operator: NotEquals
          value: '{{ request.object.spec.rules[].http || `[]` | length(@) }}'
      message: The Ingress host name must be defined, not empty.
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes. A best practice is to use an immutable
      tag that maps to a specific version of an application Pod. This policy validates
      that the image specifies a tag and that it is not called `latest`.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow Latest Tag
  name: disallow-latest-tag
spec:
  background: true
  rules:
  - match:
      resources:
        kinds:
        - Pod
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - match:
      resources:
        kinds:
        - Pod
    name: validate-image-tag
    validate:
      message: Using a mutable image tag e.g. 'latest' is not allowed.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Define and use labels that identify semantic
      attributes of your application or Deployment. A common set of labels allows
      tools to work collaboratively, describing objects in a common manner that all
      tools can understand. The recommended labels describe applications in a way
      that can be queried. This policy validates that the label `app.kubernetes.io/name`
      is specified with some value.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod, Label
    policies.kyverno.io/title: Require Labels
  name: require-labels
spec:
  background: true
  rules:
  - match:
      resources:
        kinds:
        - Pod
    name: check-for-labels
    validate:
      message: The label `app.kubernetes.io/name` is required.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/name: ?*
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Pod anti-affinity ensures that Pods are not scheduled
      on the same node or topology as other matching Pods, enhancing fault tolerance
      and availability. This policy validates that Pods define either a required or
      preferred anti-affinity rule using  `requiredDuringSchedulingIgnoredDuringExecution`
      or  `preferredDuringSchedulingIgnoredDuringExecution` with a valid topologyKey.
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Require Pod Anti-Affinity
  name: require-pod-antiaffinity
spec:
  rules:
  - match:
      resources:
        kinds:
        - Pod
    name: require-either-hard-or-soft-antiaffinity
    validate:
      anyPattern:
      - spec:
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - topologyKey: '*'
      - spec:
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - podAffinityTerm:
                  topologyKey: '*'
                weight: '*'
      message: Pod must have either required or preferred podAntiAffinity.
  validationFailureAction: enforce
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,StatefulSet
    policies.kyverno.io/category: Best Practices, EKS Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a Pod's lifecycle during deployments, restarts, and upgrades.
      For each Pod, a periodic `livenessProbe` is performed by the kubelet to determine
      if the Pod's containers are running or need to be restarted. A `readinessProbe`
      is used by Services and Deployments to determine if the Pod is ready to receive
      network traffic. This policy validates that all containers have one of livenessProbe,
      readinessProbe, or startupProbe defined.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Require Pod Probes
  name: require-pod-probes
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: validate-probes
    validate:
      foreach:
      - deny:
          conditions:
            all:
            - key: livenessProbe
              operator: AllNotIn
              value: '{{ element.keys(@)[] }}'
            - key: startupProbe
              operator: AllNotIn
              value: '{{ element.keys(@)[] }}'
            - key: readinessProbe
              operator: AllNotIn
              value: '{{ element.keys(@)[] }}'
        list: request.object.spec.containers[]
      message: Liveness, readiness, or startup probes are required for all containers.
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    policies.kyverno.io/category: Best Practices, EKS Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources requested and consumed by each Pod. It is
      recommended to require resource requests and limits per Pod, especially for
      memory and CPU. If a Namespace level request or limit is specified, defaults
      will automatically be applied to each Pod based on the LimitRange configuration.
      This policy validates that all containers have something specified for memory
      and CPU requests and memory limits.
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Require Limits and Requests
  name: require-requests-limits
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required.
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    policies.kyverno.io/category: Best Practices, EKS Best Practices
    policies.kyverno.io/description: 'A read-only root file system helps to enforce
      an immutable infrastructure strategy; the container only needs to write on the
      mounted volume that persists the state. An immutable root filesystem can also
      prevent malicious binaries from writing to the host system. This policy validates
      that containers define a securityContext with `readOnlyRootFilesystem: true`.'
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Require Read-Only Root Filesystem
  name: require-ro-rootfs
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Rolling updates allow Deployments to update with
      zero downtime by incrementally updating Pods instances with new ones. This policy
      validates that Deployments specify a rollout strategy of type 'RollingUpdate'
      and defines appropriate maxSurge and maxUnavailable values to ensure controlled
      application updates.
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Deployment
    policies.kyverno.io/title: Require Rolling Update Strategy
  name: require-rolling-update-strategy
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Deployment
    name: validate-rolling-update-strategy
    validate:
      message: Deployments must specify a rolling update strategy with appropriate
        maxSurge and maxUnavailable values.
      pattern:
        spec:
          strategy:
            rollingUpdate:
              maxSurge: ?*
              maxUnavailable: ?*
            type: RollingUpdate
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A Kubernetes Service of type NodePort uses a
      host port to receive traffic from any source. A NetworkPolicy cannot be used
      to control traffic to host ports. Although NodePort Services can be useful,
      their use must be limited to Services with additional upstream security checks.
      This policy validates that any new Services do not use the `NodePort` type.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Service
    policies.kyverno.io/title: Disallow NodePort
  name: restrict-nodeport
spec:
  background: true
  rules:
  - match:
      resources:
        kinds:
        - Service
    name: validate-nodeport
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          =(type): '!NodePort'
  validationFailureAction: Audit
