apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    pod-policies.kyverno.io/autogen-controllers: none
    policies.kyverno.io/category: Multi-Tenancy
    policies.kyverno.io/description: Kubernetes Namespaces are an optional feature
      that provide a way to segment and isolate cluster resources across multiple
      applications and users. As a best practice, workloads should be isolated with
      Namespaces. Namespaces should be required and the default (empty) Namespace
      should not be used. This policy validates that Pods specify a Namespace name
      other than `default`. Rule auto-generation is disabled here due to Pod controllers
      need to specify the `namespace` field under the top-level `metadata` object
      and not at the Pod template level.
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow Default Namespace
  name: disallow-default-namespace
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: validate-namespace
    validate:
      message: Using 'default' namespace is not allowed.
      pattern:
        metadata:
          namespace: '!default'
  - match:
      any:
      - resources:
          kinds:
          - DaemonSet
          - Deployment
          - Job
          - StatefulSet
    name: validate-podcontroller-namespace
    validate:
      message: Using 'default' namespace is not allowed for pod controllers.
      pattern:
        metadata:
          namespace: '!default'
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: An ingress resource needs to define an actual
      host name in order to be valid. This policy ensures that there is a hostname
      for each rule defined.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Ingress
    policies.kyverno.io/title: Disallow empty Ingress host
  name: disallow-empty-ingress-host
spec:
  background: false
  rules:
  - match:
      resources:
        kinds:
        - Ingress
    name: disallow-empty-ingress-host
    validate:
      deny:
        conditions:
        - key: '{{ request.object.spec.rules[].host || `[]` | length(@) }}'
          operator: NotEquals
          value: '{{ request.object.spec.rules[].http || `[]` | length(@) }}'
      message: The Ingress host name must be defined, not empty.
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: The ':latest' tag is mutable and can lead to
      unexpected errors if the image changes. A best practice is to use an immutable
      tag that maps to a specific version of an application Pod. This policy validates
      that the image specifies a tag and that it is not called `latest`.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow Latest Tag
  name: disallow-latest-tag
spec:
  background: true
  rules:
  - match:
      resources:
        kinds:
        - Pod
    name: require-image-tag
    validate:
      message: An image tag is required.
      pattern:
        spec:
          containers:
          - image: '*:*'
  - match:
      resources:
        kinds:
        - Pod
    name: validate-image-tag
    validate:
      message: Using a mutable image tag e.g. 'latest' is not allowed.
      pattern:
        spec:
          containers:
          - image: '!*:latest'
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Define and use labels that identify semantic
      attributes of your application or Deployment. A common set of labels allows
      tools to work collaboratively, describing objects in a common manner that all
      tools can understand. The recommended labels describe applications in a way
      that can be queried. This policy validates that the label `app.kubernetes.io/name`
      is specified with some value.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod, Label
    policies.kyverno.io/title: Require Labels
  name: require-labels
spec:
  background: true
  rules:
  - match:
      resources:
        kinds:
        - Pod
    name: check-for-labels
    validate:
      message: The label `app.kubernetes.io/name` is required.
      pattern:
        metadata:
          labels:
            app.kubernetes.io/name: ?*
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Pod anti-affinity ensures that Pods are not scheduled
      on the same node or topology as other matching Pods, enhancing fault tolerance
      and availability. This policy validates that Pods define either a required or
      preferred anti-affinity rule using  `requiredDuringSchedulingIgnoredDuringExecution`
      or  `preferredDuringSchedulingIgnoredDuringExecution` with a valid topologyKey.
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Require Pod Anti-Affinity
  name: require-pod-antiaffinity
spec:
  rules:
  - match:
      resources:
        kinds:
        - Pod
    name: require-either-hard-or-soft-antiaffinity
    validate:
      anyPattern:
      - spec:
          affinity:
            podAntiAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
              - topologyKey: '*'
      - spec:
          affinity:
            podAntiAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - podAffinityTerm:
                  topologyKey: '*'
                weight: '*'
      message: Pod must have either required or preferred podAntiAffinity.
  validationFailureAction: enforce
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    pod-policies.kyverno.io/autogen-controllers: DaemonSet,Deployment,StatefulSet
    policies.kyverno.io/category: Best Practices, EKS Best Practices
    policies.kyverno.io/description: Liveness and readiness probes need to be configured
      to correctly manage a Pod's lifecycle during deployments, restarts, and upgrades.
      For each Pod, a periodic `livenessProbe` is performed by the kubelet to determine
      if the Pod's containers are running or need to be restarted. A `readinessProbe`
      is used by Services and Deployments to determine if the Pod is ready to receive
      network traffic. This policy validates that all containers have one of livenessProbe,
      readinessProbe, or startupProbe defined.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Require Pod Probes
  name: require-pod-probes
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: validate-probes
    validate:
      foreach:
      - deny:
          conditions:
            all:
            - key: livenessProbe
              operator: AllNotIn
              value: '{{ element.keys(@)[] }}'
            - key: startupProbe
              operator: AllNotIn
              value: '{{ element.keys(@)[] }}'
            - key: readinessProbe
              operator: AllNotIn
              value: '{{ element.keys(@)[] }}'
        list: request.object.spec.containers[]
      message: Liveness, readiness, or startup probes are required for all containers.
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    policies.kyverno.io/category: Best Practices, EKS Best Practices
    policies.kyverno.io/description: As application workloads share cluster resources,
      it is important to limit resources requested and consumed by each Pod. It is
      recommended to require resource requests and limits per Pod, especially for
      memory and CPU. If a Namespace level request or limit is specified, defaults
      will automatically be applied to each Pod based on the LimitRange configuration.
      This policy validates that all containers have something specified for memory
      and CPU requests and memory limits.
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Require Limits and Requests
  name: require-requests-limits
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: validate-resources
    validate:
      message: CPU and memory resource requests and limits are required.
      pattern:
        spec:
          containers:
          - resources:
              limits:
                memory: ?*
              requests:
                cpu: ?*
                memory: ?*
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    policies.kyverno.io/category: Best Practices, EKS Best Practices
    policies.kyverno.io/description: 'A read-only root file system helps to enforce
      an immutable infrastructure strategy; the container only needs to write on the
      mounted volume that persists the state. An immutable root filesystem can also
      prevent malicious binaries from writing to the host system. This policy validates
      that containers define a securityContext with `readOnlyRootFilesystem: true`.'
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Require Read-Only Root Filesystem
  name: require-ro-rootfs
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: validate-readOnlyRootFilesystem
    validate:
      message: Root filesystem must be read-only.
      pattern:
        spec:
          containers:
          - securityContext:
              readOnlyRootFilesystem: true
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: Rolling updates allow Deployments to update with
      zero downtime by incrementally updating Pods instances with new ones. This policy
      validates that Deployments specify a rollout strategy of type 'RollingUpdate'
      and defines appropriate maxSurge and maxUnavailable values to ensure controlled
      application updates.
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Deployment
    policies.kyverno.io/title: Require Rolling Update Strategy
  name: require-rolling-update-strategy
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Deployment
    name: validate-rolling-update-strategy
    validate:
      message: Deployments must specify a rolling update strategy with appropriate
        maxSurge and maxUnavailable values.
      pattern:
        spec:
          strategy:
            rollingUpdate:
              maxSurge: ?*
              maxUnavailable: ?*
            type: RollingUpdate
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kyverno-version: 1.10.0
    policies.kyverno.io/category: Best Practices
    policies.kyverno.io/description: A Kubernetes Service of type NodePort uses a
      host port to receive traffic from any source. A NetworkPolicy cannot be used
      to control traffic to host ports. Although NodePort Services can be useful,
      their use must be limited to Services with additional upstream security checks.
      This policy validates that any new Services do not use the `NodePort` type.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Service
    policies.kyverno.io/title: Disallow NodePort
  name: restrict-nodeport
spec:
  background: true
  rules:
  - match:
      resources:
        kinds:
        - Service
    name: validate-nodeport
    validate:
      message: Services of type NodePort are not allowed.
      pattern:
        spec:
          =(type): '!NodePort'
  validationFailureAction: Audit

---

apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: Any additional capabilities not mentioned in
      the allowed list, which includes AUDIT_WRITE, CHOWN, DAC_OVERRIDE, FOWNER, FSETID,
      KILL, MKNOD, NET_BIND_SERVICE, SETFCAP, SETGID, SETPCAP, SETUID, SYS_CHROOT,
      are prohibited and not permitted.
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: high
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow Capabilities
    policies.nirmata.io/remediation: https://github.com/nirmata/kyverno-policies/tree/main/pod-security/baseline/disallow-capabilities/remediate-disallow-capabilities.yaml
    policies.nirmata.io/remediation-docs: https://docs.nirmata.io/policysets/podsecurity/baseline/disallow-capabilities/
  name: disallow-capabilities
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: adding-capabilities
    validate:
      deny:
        conditions:
          all:
          - key: '{{ request.object.spec.[ephemeralContainers, initContainers, containers][].securityContext.capabilities.add[]
              }}'
            operator: AnyNotIn
            value:
            - AUDIT_WRITE
            - CHOWN
            - DAC_OVERRIDE
            - FOWNER
            - FSETID
            - KILL
            - MKNOD
            - NET_BIND_SERVICE
            - SETFCAP
            - SETGID
            - SETPCAP
            - SETUID
            - SYS_CHROOT
      message: Adding capabilities beyond those listed in the policy rule is disallowed.
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Adding capabilities other than `NET_BIND_SERVICE`
      is disallowed. In addition, all containers must explicitly drop `ALL` capabilities.
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow Capabilities (Strict)
    policies.nirmata.io/remediation: https://github.com/nirmata/kyverno-policies/tree/main/pod-security/restricted/disallow-capabilities-strict/remediate-disallow-capabilities-strict.yaml
    policies.nirmata.io/remediation-docs: https://docs.nirmata.io/policysets/podsecurity/restricted/disallow-capabilities-strict/
  name: disallow-capabilities-strict
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
          operations:
          - CREATE
          - UPDATE
    name: require-drop-all
    validate:
      foreach:
      - deny:
          conditions:
            all:
            - key: ALL
              operator: AnyNotIn
              value: '{{ element.securityContext.capabilities.drop[] || `[]` }}'
        list: request.object.spec.[ephemeralContainers, initContainers, containers][]
      message: Containers must drop `ALL` capabilities.
  - match:
      any:
      - resources:
          kinds:
          - Pod
          operations:
          - CREATE
          - UPDATE
    name: adding-capabilities-strict
    validate:
      foreach:
      - deny:
          conditions:
            all:
            - key: '{{ element.securityContext.capabilities.add[] || `[]` }}'
              operator: AnyNotIn
              value:
              - NET_BIND_SERVICE
              - ""
        list: request.object.spec.[ephemeralContainers, initContainers, containers][]
      message: Any capabilities added other than NET_BIND_SERVICE are disallowed.
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: Host namespaces (Process ID namespace, Inter-Process
      Communication namespace, and network namespace) allow access to shared information
      and can be used to elevate privileges. Pods should not be allowed access to
      host namespaces. This policy ensures fields which make use of these host namespaces
      are unset or set to `false`.
    policies.kyverno.io/severity: critical
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow Host Namespaces
    policies.nirmata.io/remediation: https://github.com/nirmata/kyverno-policies/tree/main/pod-security/baseline/disallow-host-namespaces/remediate-disallow-host-namespaces.yaml
    policies.nirmata.io/remediation-docs: https://docs.nirmata.io/policysets/podsecurity/baseline/disallow-host-namespaces/
  name: disallow-host-namespaces
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: host-namespaces
    validate:
      message: Sharing the host namespaces is disallowed.
      pattern:
        spec:
          =(hostIPC): "false"
          =(hostNetwork): "false"
          =(hostPID): "false"
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: HostPath volumes let Pods use host directories
      and volumes in containers. Using host resources can be used to access shared
      data or escalate privileges and should not be allowed. This policy ensures no
      hostPath volumes are in use.
    policies.kyverno.io/severity: critical
    policies.kyverno.io/subject: Pod,Volume
    policies.kyverno.io/title: Disallow hostPath
    policies.nirmata.io/remediation: https://github.com/nirmata/kyverno-policies/tree/main/pod-security/baseline/disallow-host-path/remediate-disallow-host-path.yaml
    policies.nirmata.io/remediation-docs: https://docs.nirmata.io/policysets/podsecurity/baseline/disallow-host-path/
  name: disallow-host-path
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: host-path
    validate:
      message: HostPath volumes are forbidden.
      pattern:
        spec:
          =(volumes):
          - X(hostPath): "null"
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: |-
      Access to host ports allows potential snooping of network traffic and should not be allowed, or at minimum restricted to a known list. This policy ensures the fields spec.containers[*].ports[*].hostPort
          , spec.initContainers[*].ports[*].hostPort, and spec.ephemeralContainers[*].ports[*].hostPort
      field is unset or set to `0`.
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow hostPorts
    policies.nirmata.io/remediation: https://github.com/nirmata/kyverno-policies/tree/main/pod-security/baseline/disallow-host-ports/remediate-disallow-host-ports.yaml
    policies.nirmata.io/remediation-docs: https://docs.nirmata.io/policysets/podsecurity/baseline/disallow-host-ports/
  name: disallow-host-ports
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: host-ports-none
    validate:
      message: Use of host ports is disallowed.
      pattern:
        spec:
          =(ephemeralContainers):
          - =(ports):
            - =(hostPort): 0
          =(initContainers):
          - =(ports):
            - =(hostPort): 0
          containers:
          - =(ports):
            - =(hostPort): 0
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: Windows pods offer the ability to run HostProcess
      containers which enables privileged access to the Windows node. Privileged access
      to the host is disallowed in the baseline policy. HostProcess pods are an alpha
      feature as of Kubernetes v1.22. This policy ensures fields spec.securityContext.windowsOptions.hostProcess,
      spec.containers[*].securityContext.windowsOptions.hostProcess, spec.initContainers[*].securityContext.windowsOptions.hostProcess,
      and spec.ephemeralContainers[*].securityContext.windowsOptions.hostProcess must
      either be undefined or set to `false`.
    policies.kyverno.io/severity: critical
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow hostProcess
    policies.nirmata.io/remediation: https://github.com/nirmata/kyverno-policies/tree/main/pod-security/baseline/disallow-host-process/remediate-disallow-host-process.yaml
    policies.nirmata.io/remediation-docs: https://docs.nirmata.io/policysets/podsecurity/baseline/disallow-host-process/
  name: disallow-host-process
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: host-process-containers
    validate:
      message: HostProcess containers are disallowed.
      pattern:
        spec:
          =(ephemeralContainers):
          - =(securityContext):
              =(windowsOptions):
                =(hostProcess): "false"
          =(initContainers):
          - =(securityContext):
              =(windowsOptions):
                =(hostProcess): "false"
          containers:
          - =(securityContext):
              =(windowsOptions):
                =(hostProcess): "false"
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Privilege escalation, such as via set-user-ID
      or set-group-ID file mode, should not be allowed. This policy ensures the fields
      spec.containers[*].securityContext.allowPrivilegeEscalation, spec.initContainers[*].securityContext.allowPrivilegeEscalation,
      and spec.ephemeralContainers[*].securityContext.allowPrivilegeEscalation is
      set to `false`.
    policies.kyverno.io/severity: critical
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow Privilege Escalation
    policies.nirmata.io/remediation: https://github.com/nirmata/kyverno-policies/tree/main/pod-security/restricted/disallow-privilege-escalation/remediate-disallow-privilege-escalation.yaml
    policies.nirmata.io/remediation-docs: https://docs.nirmata.io/policysets/podsecurity/restricted/disallow-privilege-escalation/
  name: disallow-privilege-escalation
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: privilege-escalation
    validate:
      message: Privilege escalation is disallowed.
      pattern:
        spec:
          =(ephemeralContainers):
          - securityContext:
              allowPrivilegeEscalation: "false"
          =(initContainers):
          - securityContext:
              allowPrivilegeEscalation: "false"
          containers:
          - securityContext:
              allowPrivilegeEscalation: "false"
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: Privileged mode disables most security mechanisms
      and must not be allowed. This policy ensures the fields spec.containers[*].securityContext.privileged
      and spec.initContainers[*].securityContext.privileged must be unset or set to
      `false`.
    policies.kyverno.io/severity: critical
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow Privileged Containers
    policies.nirmata.io/remediation: https://github.com/nirmata/kyverno-policies/tree/main/pod-security/baseline/disallow-privileged-containers/remediate-disallow-privileged-containers.yaml
    policies.nirmata.io/remediation-docs: https://docs.nirmata.io/policysets/podsecurity/baseline/disallow-privileged-containers/
  name: disallow-privileged-containers
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: privileged-containers
    validate:
      message: Privileged mode is disallowed.
      pattern:
        spec:
          =(ephemeralContainers):
          - =(securityContext):
              =(privileged): "false"
          =(initContainers):
          - =(securityContext):
              =(privileged): "false"
          containers:
          - =(securityContext):
              =(privileged): "false"
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: The default /proc masks are set up to reduce
      attack surface and should be required. This policy ensures nothing but the default
      procMount can be specified for the fields fields spec.containers[*].securityContext.procMount,
      spec.initContainers[*].securityContext.procMount, and spec.ephemeralContainers[*].securityContext.procMount.
      Note that in order for users to deviate from the `Default` procMount requires
      setting a feature gate at the API server.
    policies.kyverno.io/severity: high
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow procMount
    policies.nirmata.io/remediation: https://github.com/nirmata/kyverno-policies/tree/main/pod-security/baseline/disallow-proc-mount/remediate-disallow-proc-mount-containers.yaml
    policies.nirmata.io/remediation-docs: https://docs.nirmata.io/policysets/podsecurity/baseline/disallow-proc-mount/
  name: disallow-proc-mount
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: check-proc-mount
    validate:
      message: Changing the proc mount from the default is not allowed.
      pattern:
        spec:
          =(ephemeralContainers):
          - =(securityContext):
              =(procMount): Default
          =(initContainers):
          - =(securityContext):
              =(procMount): Default
          containers:
          - =(securityContext):
              =(procMount): Default
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: SELinux options can be used to escalate privileges
      and should not be allowed. This policy ensures that the fields spec.securityContext.seLinuxOptions.type,
      spec.containers[*].securityContext.seLinuxOptions.type, spec.initContainers[*].securityContext.seLinuxOptions,
      and spec.ephemeralContainers[*].securityContext.seLinuxOptions.type must either
      be unset or set to one of the allowed values (container_t, container_init_t,
      or container_kvm_t).
    policies.kyverno.io/severity: high
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Disallow SELinux
    policies.nirmata.io/remediation-docs: https://docs.nirmata.io/policysets/podsecurity/baseline/disallow-selinux/
  name: disallow-selinux
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: selinux-type
    validate:
      message: Setting the SELinux type is restricted.
      pattern:
        spec:
          =(ephemeralContainers):
          - =(securityContext):
              =(seLinuxOptions):
                =(type): container_t | container_init_t | container_kvm_t
          =(initContainers):
          - =(securityContext):
              =(seLinuxOptions):
                =(type): container_t | container_init_t | container_kvm_t
          =(securityContext):
            =(seLinuxOptions):
              =(type): container_t | container_init_t | container_kvm_t
          containers:
          - =(securityContext):
              =(seLinuxOptions):
                =(type): container_t | container_init_t | container_kvm_t
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: selinux-user-role
    validate:
      message: Setting the SELinux user or role is forbidden. The fields spec.securityContext.seLinuxOptions.user,
        spec.securityContext.seLinuxOptions.role, spec.containers[*].securityContext.seLinuxOptions.user,
        spec.containers[*].securityContext.seLinuxOptions.role, spec.initContainers[*].securityContext.seLinuxOptions.user,
        spec.initContainers[*].securityContext.seLinuxOptions.role, spec.ephemeralContainers[*].securityContext.seLinuxOptions.user,
        and spec.ephemeralContainers[*].securityContext.seLinuxOptions.role must be
        unset.
      pattern:
        spec:
          =(ephemeralContainers):
          - =(securityContext):
              =(seLinuxOptions):
                X(role): "null"
                X(user): "null"
          =(initContainers):
          - =(securityContext):
              =(seLinuxOptions):
                X(role): "null"
                X(user): "null"
          =(securityContext):
            =(seLinuxOptions):
              X(role): "null"
              X(user): "null"
          containers:
          - =(securityContext):
              =(seLinuxOptions):
                X(role): "null"
                X(user): "null"
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users. This policy ensures that the fields  spec.securityContext.runAsUser,
      spec.containers[*].securityContext.runAsUser, spec.initContainers[*].securityContext.runAsUser,
      and spec.ephemeralContainers[*].securityContext.runAsUser is either unset or
      set to a number greater than zero.
    policies.kyverno.io/severity: critical
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Require Run As Non-Root User
    policies.nirmata.io/remediation: https://github.com/nirmata/kyverno-policies/tree/main/pod-security/restricted/require-run-as-non-root-user/remediate-require-run-as-non-root-user.yaml
    policies.nirmata.io/remediation-docs: https://docs.nirmata.io/policysets/podsecurity/restricted/require-run-as-non-root-user/
  name: require-run-as-non-root-user
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: run-as-non-root-user
    validate:
      message: Running the container as root user is not allowed.
      pattern:
        spec:
          =(ephemeralContainers):
          - =(securityContext):
              =(runAsUser): '>0'
          =(initContainers):
          - =(securityContext):
              =(runAsUser): '>0'
          =(securityContext):
            =(runAsUser): '>0'
          containers:
          - =(securityContext):
              =(runAsUser): '>0'
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: Containers must be required to run as non-root
      users. This policy ensures either the field  spec.securityContext.runAsNonRoot
      is set to `true`, or the fields spec.containers[*].securityContext.runAsNonRoot,
      spec.initContainers[*].securityContext.runAsNonRoot, and spec.ephemeralContainers[*].securityContext.runAsNonRoot
      is set to `true`. A known issue prevents a policy such as this using `anyPattern`
      from being persisted properly in Kubernetes 1.23.0-1.23.2.
    policies.kyverno.io/severity: critical
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Require runAsNonRoot
    policies.nirmata.io/remediation: https://github.com/nirmata/kyverno-policies/tree/main/pod-security/restricted/require-run-as-nonroot/remediate-require-run-as-nonroot.yaml
    policies.nirmata.io/remediation-docs: https://docs.nirmata.io/policysets/podsecurity/restricted/require-run-as-non-root/
  name: require-run-as-nonroot
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: run-as-non-root
    validate:
      anyPattern:
      - spec:
          =(ephemeralContainers):
          - =(securityContext):
              =(runAsNonRoot): "true"
          =(initContainers):
          - =(securityContext):
              =(runAsNonRoot): "true"
          containers:
          - =(securityContext):
              =(runAsNonRoot): "true"
          securityContext:
            runAsNonRoot: "true"
      - spec:
          =(ephemeralContainers):
          - securityContext:
              runAsNonRoot: "true"
          =(initContainers):
          - securityContext:
              runAsNonRoot: "true"
          containers:
          - securityContext:
              runAsNonRoot: "true"
      message: Running the container as root is not allowed.
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: On supported hosts, the 'runtime/default' AppArmor
      profile is applied by default. The default policy should prevent overriding
      or disabling the policy, or restrict overrides to an allowed set of profiles.
      This policy ensures Pods do not specify any other AppArmor profiles than `runtime/default`
      or `localhost/*`.
    policies.kyverno.io/minversion: 1.3.0
    policies.kyverno.io/severity: high
    policies.kyverno.io/subject: Pod, Annotation
    policies.kyverno.io/title: Restrict AppArmor
    policies.nirmata.io/remediation-docs: https://docs.nirmata.io/policysets/podsecurity/baseline/restrict-apparmor-profiles/
  name: restrict-apparmor-profiles
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: app-armor
    validate:
      message: Specifying other AppArmor profiles is disallowed.
      pattern:
        =(metadata):
          =(annotations):
            =(container.apparmor.security.beta.kubernetes.io/*): runtime/default |
              localhost/*
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: The seccomp profile must not be explicitly set
      to Unconfined. This policy,  requiring Kubernetes v1.19 or later, ensures that
      the fields spec.securityContext.seccompProfile.type, spec.containers[*].securityContext.seccompProfile.type,
      spec.initContainers[*].securityContext.seccompProfile.type, and spec.ephemeralContainers[*].securityContext.seccompProfile.type
      must be unset or set to `RuntimeDefault` or `Localhost`.
    policies.kyverno.io/severity: high
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Restrict Seccomp
    policies.nirmata.io/remediation-docs: https://docs.nirmata.io/policysets/podsecurity/baseline/restrict-seccomp/
  name: restrict-seccomp
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: check-seccomp
    validate:
      message: Use of custom Seccomp profiles is disallowed.
      pattern:
        spec:
          =(ephemeralContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): RuntimeDefault | Localhost
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): RuntimeDefault | Localhost
          =(securityContext):
            =(seccompProfile):
              =(type): RuntimeDefault | Localhost
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): RuntimeDefault | Localhost
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: The seccomp profile in the Restricted group must
      not be explicitly set to Unconfined but additionally must also not allow an
      unset value. This policy,  requiring Kubernetes v1.19 or later, ensures that
      the fields spec.securityContext.seccompProfile.type, spec.containers[*].securityContext.seccompProfile.type,
      spec.initContainers[*].securityContext.seccompProfile.type, and spec.ephemeralContainers[*].securityContext.seccompProfile.type
      is set to `RuntimeDefault` or `Localhost`. A known issue prevents a policy such
      as this using `anyPattern` from being persisted properly in Kubernetes 1.23.0-1.23.2.
    policies.kyverno.io/severity: high
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Restrict Seccomp (Strict)
    policies.nirmata.io/remediation: https://github.com/nirmata/kyverno-policies/tree/main/pod-security/restricted/restrict-seccomp-strict/remediate-restrict-seccomp-strict.yaml
    policies.nirmata.io/remediation-docs: https://docs.nirmata.io/policysets/podsecurity/restricted/restrict-seccomp-strict/
  name: restrict-seccomp-strict
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: check-seccomp-strict
    validate:
      anyPattern:
      - spec:
          =(ephemeralContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): RuntimeDefault | Localhost
          =(initContainers):
          - =(securityContext):
              =(seccompProfile):
                =(type): RuntimeDefault | Localhost
          containers:
          - =(securityContext):
              =(seccompProfile):
                =(type): RuntimeDefault | Localhost
          securityContext:
            seccompProfile:
              type: RuntimeDefault | Localhost
      - spec:
          =(ephemeralContainers):
          - securityContext:
              seccompProfile:
                type: RuntimeDefault | Localhost
          =(initContainers):
          - securityContext:
              seccompProfile:
                type: RuntimeDefault | Localhost
          containers:
          - securityContext:
              seccompProfile:
                type: RuntimeDefault | Localhost
      message: Use of custom Seccomp profiles is disallowed.
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    policies.kyverno.io/category: Pod Security Standards (Baseline)
    policies.kyverno.io/description: Sysctls can disable security mechanisms or affect
      all containers on a host, and should be disallowed except for an allowed "safe"
      subset. A sysctl is considered safe if it is namespaced in the container or
      the Pod, and it is isolated from other Pods or processes on the same Node. This
      policy ensures that only those "safe" subsets can be specified in a Pod. The
      field spec.securityContext.sysctls must be unset or not use any other names
      than kernel.shm_rmid_forced, net.ipv4.ip_local_port_range, net.ipv4.ip_unprivileged_port_start,
      net.ipv4.tcp_syncookies and net.ipv4.ping_group_range.
    policies.kyverno.io/severity: critical
    policies.kyverno.io/subject: Pod
    policies.kyverno.io/title: Restrict sysctls
    policies.nirmata.io/remediation-docs: https://docs.nirmata.io/policysets/podsecurity/baseline/restrict-sysctls/
  name: restrict-sysctls
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: check-sysctls
    validate:
      message: Setting additional sysctls beyond the allowed type is disallowed.
      pattern:
        spec:
          =(securityContext):
            =(sysctls):
            - =(name): kernel.shm_rmid_forced | net.ipv4.ip_local_port_range | net.ipv4.ip_unprivileged_port_start
                | net.ipv4.tcp_syncookies | net.ipv4.ping_group_range
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: 1.22-1.23
    kyverno.io/kyverno-version: 1.10.0
    policies.kyverno.io/category: Pod Security Standards (Restricted)
    policies.kyverno.io/description: 'In addition to restricting HostPath volumes,
      the restricted pod security profile limits usage of non-core volume types to
      those defined through PersistentVolumes. This policy blocks any other type of
      volume other than those in the allow list.      '
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: critical
    policies.kyverno.io/subject: Pod,Volume
    policies.kyverno.io/title: Restrict Volume Types
  name: restrict-volume-types
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: restricted-volumes
    preconditions:
      all:
      - key: '{{ request.operation || ''BACKGROUND'' }}'
        operator: NotEquals
        value: DELETE
    validate:
      deny:
        conditions:
          all:
          - key: '{{ request.object.spec.volumes[].keys(@)[] || '''' }}'
            operator: AnyNotIn
            value:
            - name
            - configMap
            - csi
            - downwardAPI
            - emptyDir
            - ephemeral
            - persistentVolumeClaim
            - projected
            - secret
            - ""
      message: 'Only the following types of volumes may be used: configMap, csi, downwardAPI,
        emptyDir, ephemeral, persistentVolumeClaim, projected, and secret.          '
  validationFailureAction: Audit

---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    policies.kyverno.io/category: RBAC Best Practices
    policies.kyverno.io/description: 'Kubernetes automatically mounts ServiceAccount
      credentials in each Pod. The ServiceAccount may be assigned roles allowing Pods
      to access API resources. Blocking this ability is an extension of the least
      privilege best practice and should be followed if Pods do not need to speak
      to the API server to function. This policy ensures that mounting of these ServiceAccount
      tokens is blocked.      '
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Pod,ServiceAccount
    policies.kyverno.io/title: Restrict Auto-Mount of Service Account Tokens
  name: restrict-automount-sa-token
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Pod
    name: validate-automountServiceAccountToken
    preconditions:
      all:
      - key: '{{ request."object".metadata.labels."app.kubernetes.io/part-of" || ''''
          }}'
        operator: NotEquals
        value: policy-reporter
    validate:
      message: Auto-mounting of Service Account tokens is not allowed.
      pattern:
        spec:
          automountServiceAccountToken: "false"
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: "1.23"
    policies.kyverno.io/category: RBAC Best Practices
    policies.kyverno.io/description: 'Certain system groups exist in Kubernetes which
      grant permissions that are used for certain system-level functions yet typically
      never appropriate for other users. This policy prevents creating bindings for
      system:masters group.      '
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: RoleBinding, ClusterRoleBinding, RBAC
    policies.kyverno.io/title: Restrict Binding System Groups
  name: restrict-binding-system-groups
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - RoleBinding
          - ClusterRoleBinding
    name: restrict-masters
    validate:
      message: Binding to system:masters is not allowed.
      pattern:
        roleRef:
          name: '!system:masters'
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: "1.23"
    policies.kyverno.io/category: RBAC Best Practices
    policies.kyverno.io/description: 'A ClusterRole with nodes/proxy resource access
      allows a user to perform anything the kubelet API allows. It also allows users
      to bypass the API server and talk directly to the kubelet potentially circumventing
      audits and admission controllers. See https://blog.aquasec.com/privilege-escalation-kubernetes-rbac
      for more info. This policy prevents the creation of a ClusterRole if it contains
      the nodes/proxy resource.       '
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: ClusterRole, RBAC
    policies.kyverno.io/title: Restrict ClusterRole with Nodes Proxy
  name: restrict-clusterrole-nodesproxy
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - ClusterRole
    name: clusterrole-nodesproxy
    validate:
      deny:
        conditions:
          any:
          - key: nodes/proxy
            operator: AnyIn
            value: '{{ request.object.rules[].resources[] }}'
      message: A ClusterRole containing the nodes/proxy resource is not allowed.
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: "1.23"
    policies.kyverno.io/category: RBAC Best Practices
    policies.kyverno.io/description: 'The verbs `impersonate`, `bind`, and `escalate`
      may all potentially lead to privilege escalation and should be tightly controlled.
      This policy prevents use of these verbs in Role or ClusterRole resources.      '
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: Role, ClusterRole, RBAC
    policies.kyverno.io/title: Restrict Escalation Verbs in Roles
  name: restrict-escalation-verbs-roles
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Role
          - ClusterRole
    name: escalate
    validate:
      foreach:
      - deny:
          conditions:
            all:
            - key: '{{ element.apiGroups || '''' }}'
              operator: AnyIn
              value:
              - rbac.authorization.k8s.io
            - key: '{{ element.resources || '''' }}'
              operator: AnyIn
              value:
              - clusterroles
              - roles
            - key: '{{ element.verbs }}'
              operator: AnyIn
              value:
              - bind
              - escalate
              - impersonate
        list: request.object.rules[]
      message: Use of verbs `escalate`, `bind`, and `impersonate` are forbidden.
  validationFailureAction: Audit
---
apiVersion: kyverno.io/v1
kind: ClusterPolicy
metadata:
  annotations:
    kyverno.io/kubernetes-version: "1.23"
    policies.kyverno.io/category: RBAC Best Practices
    policies.kyverno.io/description: 'Wildcards (''*'') in resources grants access
      to all of the resources referenced by the given API group and does not follow
      the principal of least privilege. As much as possible, avoid such open resources
      unless scoped to perhaps a custom API group. This policy blocks any Role or
      ClusterRole that contains a wildcard entry in the resources list found in any
      rule.      '
    policies.kyverno.io/minversion: 1.6.0
    policies.kyverno.io/severity: medium
    policies.kyverno.io/subject: ClusterRole, Role, RBAC
    policies.kyverno.io/title: Restrict Wildcards in Resources
  name: restrict-wildcard-resources
spec:
  background: true
  rules:
  - match:
      any:
      - resources:
          kinds:
          - Role
          - ClusterRole
    name: wildcard-resources
    validate:
      deny:
        conditions:
          any:
          - key: '{{ contains(request.object.rules[].resources[], ''*'') }}'
            operator: Equals
            value: true
      message: Use of a wildcard ('*') in any resources is forbidden.
  validationFailureAction: Audit
